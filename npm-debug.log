0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@3.10.3
3 info using node@v6.2.1
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/barreiros/Documents/workspace/Barreiros_GorillaJS',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/barreiros/.npm/gorillajs/0.0.27/package.tgz not in flight; packing
9 verbose correctMkdir /Users/barreiros/.npm correctMkdir not in flight; initializing
10 info lifecycle gorillajs@0.0.27~prepublish: gorillajs@0.0.27
11 silly lifecycle gorillajs@0.0.27~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/Users/barreiros/.npm/gorillajs/0.0.27/package.tgz',
12 verbose tar pack   '/Users/barreiros/Documents/workspace/Barreiros_GorillaJS' ]
13 verbose tarball /Users/barreiros/.npm/gorillajs/0.0.27/package.tgz
14 verbose folder /Users/barreiros/Documents/workspace/Barreiros_GorillaJS
15 verbose addLocalTarball adding from inside cache /Users/barreiros/.npm/gorillajs/0.0.27/package.tgz
16 verbose correctMkdir /Users/barreiros/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd gorillajs@0.0.27
18 verbose afterAdd /Users/barreiros/.npm/gorillajs/0.0.27/package/package.json not in flight; writing
19 verbose correctMkdir /Users/barreiros/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /Users/barreiros/.npm/gorillajs/0.0.27/package/package.json written
21 silly publish { name: 'gorillajs',
21 silly publish   author:
21 silly publish    { name: 'David Barreiros',
21 silly publish      email: 'hola@davidbarreiros.es',
21 silly publish      url: 'davidbarreiros.es' },
21 silly publish   version: '0.0.27',
21 silly publish   description: 'GorillaJS is a Docker tool-based that helps you to kickstart new projects. It get save time making easier repeated task such as database creation, clone repositories or install applications.',
21 silly publish   keywords: [ 'Docker', 'templates', 'Wordpress', 'html5', 'productivity' ],
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/barreiros/GorillaJS.git' },
21 silly publish   license: 'MIT License',
21 silly publish   preferGlobal: true,
21 silly publish   bin: { gorilla: 'index.js' },
21 silly publish   files: [ 'lib', 'templates', 'README.md', 'index.js' ],
21 silly publish   dependencies:
21 silly publish    { 'ascii-art': '^1.0.3',
21 silly publish      colors: '^1.1.2',
21 silly publish      dateformat: '^1.0.11',
21 silly publish      'escape-string-regexp': '^1.0.4',
21 silly publish      'fs-extra': '^0.26.2',
21 silly publish      gulp: '^3.9.0',
21 silly publish      'gulp-batch-replace': '0.0.0',
21 silly publish      'gulp-jshint': '^2.0.0',
21 silly publish      'gulp-rimraf': '^0.2.0',
21 silly publish      'gulp-using': '^0.1.0',
21 silly publish      htmlencode: '0.0.4',
21 silly publish      inquirer: '^0.11.4',
21 silly publish      ip: '^1.1.0',
21 silly publish      jshint: '^2.9.1',
21 silly publish      minimist: '^1.2.0',
21 silly publish      mkdirp: '^0.5.1',
21 silly publish      'object-merge': '^2.5.1',
21 silly publish      open: '0.0.5',
21 silly publish      openurl: '^1.1.1',
21 silly publish      path: '^0.12.7',
21 silly publish      'readline-sync': '^1.2.21',
21 silly publish      'run-sequence': '^1.1.4',
21 silly publish      sleep: '^3.0.0',
21 silly publish      split: '^1.0.0',
21 silly publish      ssh2: '^0.4.13',
21 silly publish      through2: '^2.0.0' },
21 silly publish   readme: '<p align="center">\n  <img src="http://s23.postimg.org/ka5fnkw23/logo_mini.jpg" alt="GorillaJS logo"/>\n</p>\n\n> *English version*: I\'m translating the documentation. For now, you can read it in Spanish, which is a very nice language.\n\n**GorillaJS es una herramienta basada en Docker que simplifica la creación de entornos de desarrollo web**\n\n# Objetivo y filosofía  \n\nGorillaJS pretende servir de apoyo a los desarrolladores web ahorrándoles tiempo en la ejecución de tareas repetitivas, como podrían ser la configuración e instalación de aplicaciones, la creación de bases de datos o la réplica del proyecto.\n\nPara conseguir esto, GorillaJS utiliza un sistema simple de preguntas y respuestas que va almacenando en el archivo .gorilla/gorillafile y que después utiliza para configurar el proyecto.   \n> Es importante saber que, aunque GorillaJS se base en Docker y Nodejs, no es necesario tener ningún conocimiento en estas tecnologías, más allá de la simple instalación de ambas.\n  \n<p align="center">\n    <a href="http://www.youtube.com/watch?feature=player_embedded&v=LKXsY0a4BWo" target="_blank">\n        <img src="http://img.youtube.com/vi/LKXsY0a4BWo/0.jpg" alt="How to install Wordpress in 80 seconds" width="50%" height="auto" border="3" />\n    </a>\n</p>\n\nEn este ejemplo GorillaJS usa la [plantilla predefinida de Wordpress](#plantillas-por-defecto) para:\n* iniciar los contenedores de Docker\n* instalar el entorno LAMP\n* crear y configurar la base de datos\n* descargar los archivos del repositorio oficial de Wordpress\n* instalar Wordpress\n* configurar el archivo hosts del ordenador\n* abrir el navegador con la url del proyecto.\n\nTodo esto lo consigue con un solo comando y en menos de 2 minutos.\n\n---\n\n##### Instalación\n\n> GorillaJS está en fase beta, y es compatible con Mac y Linux. En un futuro estará disponible en Windows.\n\nGorillaJS se instala desde [npm](https://docs.npmjs.com/getting-started/installing-node) y necesita Docker para funcionar.\n\n```nodejs\nnpm install -g gorillajs\n```\n\n##### Instalar Docker\n\n* [Mac](https://docs.docker.com/docker-for-mac/)\n> Es necesario tener instaldo Docker for Mac. Con Docker Toolbox no funciona.\n\n* Linux\n> Instalar [Docker](https://docs.docker.com/engine/getstarted/linux_install_help/) y [Docker Compose](https://docs.docker.com/compose/install/). \n\n* [Windows](https://docs.docker.com/docker-for-windows/)\n> Es necesario tener instalado Docker for Windows. Con Docker Toolbox no funciona.\n\n##### Cómo se usa\n\nGorillaJS tiene un solo comando: \n\n```nodejs\ngorilla init [path]\n```  \n\n> El path es opcional y si no se indica GorillaJS creará el proyecto en el directorio actual.\n\nEste comando sirve tanto para instalar un proyecto como para iniciarlo. La diferencia es que si se ejecuta *gorilla init [path]* en un directorio en el que ya existe un proyecto de GorillaJS se vuelve a configurar el proyecto con los valores que se guardaron la última vez y se reinician los contenedores de Docker. Para cambiar los valores hay que usar el parámetro -f. \n\n```nodejs\ngorilla init [path] -f\n```\n\n> GorillaJS solo sobreescribe archivos de configuración, **nunca borra los archivos del proyecto**.\n\n\n##### Parámetros\n\n| Nombre | Función             |\n| ---    | ---                 |\n| -v     | Enable verbose mode |\n| -f     | Ask you again       |\n\n# Plantillas por defecto\n\nPor defecto GorillaJS viene con una plantilla para crear proyectos de Wordpress. Para poder usar esta plantilla es necesario aportar los siguientes valores:\n\n* **Select the docker template value from the list above**  \n> Por ahora solo se puede elegir entre wordpress o una [plantilla personalizada](#user-content-plantillas-personalizadas).\n\n* **Tell me a name for your project**  \n> Un nombre identificativo para el proyecto. Algo corto.\n\n* **How do you prefer to access your site, through domain name or ip?**  \n> Con GorillaJS se puede elegir cómo acceder al sitio del proyecto. Si se selecciona *domain*, aparecen además estos otros valores:\n\n * **Tell me your local project url**  \n> El nombre de dominio a través del cual se quiere acceder al site. Hay que poner solo el nombre: sin http://, ni https://.\n \n * **Enter the system hostsfile value**  \n> La ruta absoluta del archivo hosts del ordenador desde el que se está ejecutando GorillaJS. Para más información sobre [dónde encontrar](https://en.wikipedia.org/wiki/Hosts_file la ruta del archivo hosts).\n\n* **What is your public folder?**  \n> La carpeta pública en la que irán los archivos de Wordpress. Si ya existe una carpeta con los archivos, GorillaJS no la sobreescribe: usa esa misma carpeta, respetando los contenidos.\n\n* **The data base name**\n\n* **The data base user name**\n\n* **The data base password**  \n> Es muy importante saber que si ya existe un proyecto de Wordpress previo, como GorillaJS no sobreescribe los archivos, la configuración de estos tres últimos valores tiene que seguir igual que la del archivo wp-config, y en este archivo es necesario cambiar el valor de la constante DB_HOST a *mysql*.\n\n* **Where do you want to store the data base files**  \n> Docker necesita una carpeta en la que guardar los datos de la base de datos porque, por naturaleza, los borra cada vez que se apaga el contenedor. Esta carpeta se usa para salvar esos datos y no perderlos. Es uno de los dos [*volumes*](https://docs.docker.com/engine/tutorials/dockervolumes/) que usa esta plantilla. El otro es la carpeta pública en la que van los archivos de Wordpress.\n\n\n# Plantillas personalizadas\n\n> Esta parte solo es para los usuarios que quieran hacer una plantilla personalizada, y requiere conocimientos avanzados de Docker.\n\nAdemás de las plantillas que trae por defecto, GorillaJS permite crear plantillas personalizadas. El único requisito para crear una plantilla es que ésta debe tener un archivo *docker-compose.yml*. [Aquí hay más información sobre Docker Compose](https://docs.docker.com/compose/).\nPor ejemplo, la plantilla de Wordpress, que está en .../templates/wordpress/ utiliza varios archivos a lo largo del proceso de configuración. \n\n| Nombre                            | Función                                                                                                                                                                                                                       |\n| ---                               | ---                                                                                                                                                                                                                           |\n| apache-httpd.conf                 | Se usa una vez iniciados los contenedores, para sobreescribir la configuración por defecto de Apache.                                                                                                                         |\n| apache-init.conf                  | Se usa al iniciar Apache y se encarga de descargar Wordpress del repositorio oficial y de instalarlo a través de WP-CLI. También se encarga de configurar el archivo wp-config y de renombrar el dominio, si fuera necesario. |\n| apache-vhost.conf                 | Se usa para crear el virtualhost dentro del contenedor de Apache.                                                                                                                                                             |\n| docker-compose.yml                | Generar los contenedores de Docker (Apache y MySQL) y los volúmenes en los que va la aplicación y los datos persistentes de mysql.                                                                                            |\n| gorillafile                       | Se usa para pasarle a GorillaJS valores de configuración iniciales de plantilla. [Más información](#user-content-archivo-gorillafile).                                                                                        |\n| messages                          | Se usar para indicarle a GorillaJS qué debe preguntar para conseguir un valor. [Más información](#user-content-archivo-messages).                                                                                             |\n| mysql-debian.cnf, mysql-init.conf | Son archivos de configuración de mysql, como Apache.                                                                                                                                                                          |\n| php-php5-fpm.conf                 | Configuración inicial de php-fpm.                                                                                                                                                                                             |\n| waiting.html                      | Se usa en lugar del index.html que viene por defecto en Apache.                                                                                                                                                               |\n\nEstos archivos están en la plantilla porque, de alguna manera, se encargan de la configuración de una parte del proyecto que debe ser única. Por ejemplo, el virtualhost de Apache: \n\n```bash\n\n<VirtualHost *:80>\n\n    Servername {{project.domain}}\n\n    DocumentRoot /var/www/{{project.domain}}/{{project.srcout}}\n\n    ErrorLog /var/log/apache2/{{project.domain}}-error.log\n    CustomLog /var/log/apache2/{{project.domain}}-access.log combined\n  \n    <Directory /var/www/{{project.domain}}/{{project.srcout}}>\n        Options Indexes FollowSymLinks MultiViews\n        AllowOverride All\n        Order allow,deny\n        allow from all\n    </Directory>\n\n</VirtualHost>\n\n```\n\nEn este archivo los valores de ServerName, DocumentRoot, etc... tienen que ser únicos, por razones obvias. De otra manera, si se quisiera acceder al proyecto a través del nombre de dominio, y las configuraciones no fuera únicas, el host no sabría qué proyecto mostrar. Esto, como ya se ha dicho antes, es opcional; pues en este ejemplo en concreto se podría acceder a través de ip y dejar la configuración por defecto de Apache.  \n\n#### Uso de variables en la plantilla.\n\nGorillaJS recorre todos los archivos que hay en la carpeta de la plantilla para localizar variables y poder asignarles los valores que hay en el archivo [*gorillafile*](#user-content-archivo-gorillafile). Estas variables siguen un marcado específico: siempre van encerradas entre {{}}. Por ejemplo: \n\n```bash\n{{NOMBRE_DE_LA_VARIABLE}}  \n```\n\nTambién se puede agrupar usando el marcado:\n\n```bash\n{{NOMBRE_DEL_GRUPO.NOMBRE_DE_LA_VARIABLE}}\n```\n\nGorillaJS solo reconoce hasta un segundo nivel de profundidad. El siguiente ejemplo no será válido:\n\n```bash\n{{NOMBRE_DEL_GRUPO.NOMBRE_DE_LA_VARIABLE.NOMBRE_DE_OTRA_VARIABLE}}\n\n```\n\n> GorillaJS recorre los archivos cada vez que ejecutamos el comando *gorilla init*, es decir, siempre que se inicia el proyecto. \n\n#### Archivo gorillafile\n\nLa plantilla puede traer un archivo gorillafile por defecto. Los valores que se pongan en este archivo se complementarán con los generados por el sistema de preguntas y respuestas.  \nSiguiendo con el ejemplo de la plantilla de Wordpress, el archivo gorillafile que se genera a través de esa plantilla sería algo así:\n\n```bash\n\n"local": {\n    "docker": {\n        "gorillafolder": ".gorilla",\n        "templatefolder": "template",\n        "template": "wordpress",\n        "port": 4815\n    },\n    "project": {\n        "slug": "veryease",\n        "domain": "veriease.local",\n        "srcout": "application",\n        "datafolder": "application-db"\n    },\n    "apache": {\n        "adminemail": "test@yourdomain.com"\n    },\n    "database": {\n        "dbname": "veryeasedb",\n        "username": "veryeaseuser",\n        "password": "1234"\n    },\n    "host": {\n        "enabled": "domain"\n    }\n}\n\n```\n> Al estar en formato json, se pueden cambiar los valores del fichero, guardar y volver a ejecutar gorilla init para cambiar la configuración del proyecto.\n\nEl archivo gorillafile puede servir para dos propósitos:\n* Sugerir valores por defecto a las preguntas que se le muestran al usuario.\n* Asignar un valor predeterminado a una variable y evitar que se le pregunte al usuario por ella (esto será así mientras el usuario no ejecute gorilla con la opción -f).\n\n**Sugerir valores**\nPara sugerir valores, éstos tienen que ir en un árbol que empieze con el valor *default*. Por ejemplo:\n\n```bash\n\n"default": {\n    "database": {\n        "name": "application-db",\n        "user": "gorilla.local"\n    },\n    "system": {\n        "hostsfile": "/etc/hosts"\n    },\n    ...\n\n```\n\n**Asignar valores**\nPara asignar valores, éstos tienen que ir en un árbol que empieze con el valor *local*. Por ejemplo:\n\n```bash\n\n"local": {\n    "project": {\n        "datafolder": "application-db",\n        "domain": "gorilla.local"\n    },\n    ...\n\n```\n\nDe esta manera, se podría crear un archivo gorillafile en la plantilla que fuera algo así:\n\n```bash\n\n{\n    "local": {\n        "project": {\n            "datafolder": "application-db",\n            "domain": "gorilla.local"\n        }\n    },\n    "default": {\n        "database": {\n            "name": "application-db",\n            "user": "gorilla.local"\n        },\n        "system": {\n            "hostsfile": "/etc/hosts"\n        }\n    }\n}\n\n```\nDe esta forma, si hay un archivo en la plantilla con las variables {{database.name}} GorillaJS le sugerirá al usuario que use el valor *application-db*, mientras que si en la plantilla hay una variable {{project.domain}}, GorillaJS no le preguntará nada al usuario y rellenará ese varaible con el valor *gorilla.local*, a menos que el usuario haya ejecutado gorilla init -f, en cuyo caso solo le sugerirá usar el valor *gorilla-local*.\n\n#### Archivo messages\n\nTambién se puede personalizar el texto de la pregunta que GorillaJS le muestra al usuario. Para hacer esto se usa el archivo *messages* que, al igual que el archivo gorillafile, está en formato json.  \nUn ejemplo de archivo message sería este:\n\n```bash\n{\n    "questions": {\n        "database": {\n            "name": "Please, enter the data base name. Just letters and numbers, no special characters",\n            "user": "Please, enter the user data base"\n        }\n    }\n}\n\n```\n\nEsta vez el árbol tiene que empezar con el valor "questions", seguido de la ruta a las variables a las que se le quiere cambiar la pregunta. Si no hay ninguna pregunta, el formato será el que viene por defecto en GorillaJS: \n\n*"Please, enter the NOMBRE_DEL_GRUPO NOMBRE_DE_LA_VARIALBE value."*\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: '2a2c76fed46c39bd76cf74bcfa2fe7375df669bf',
21 silly publish   bugs: { url: 'https://github.com/barreiros/GorillaJS/issues' },
21 silly publish   homepage: 'https://github.com/barreiros/GorillaJS#readme',
21 silly publish   _id: 'gorillajs@0.0.27',
21 silly publish   scripts: {},
21 silly publish   _shasum: 'b6d13a6dac13cc8ebd46b1be14fe2bf65ed7f3e4',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name gorillajs
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'gorillajs',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   escapedName: 'gorillajs',
26 silly mapToRegistry   name: 'gorillajs',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/gorillajs
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading /Users/barreiros/.npm/gorillajs/0.0.27/package.tgz
30 verbose request uri https://registry.npmjs.org/gorillajs
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 10:47:27
33 verbose request using bearer token for auth
34 verbose request id 48e8f9cb3d585dc6
35 http request PUT https://registry.npmjs.org/gorillajs
36 http 403 https://registry.npmjs.org/gorillajs
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '96',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Sat, 15 Oct 2016 08:47:29 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-lhr6350-LHR',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1476521248.069145,VS0,VE1414',
37 verbose headers   vary: 'Accept-Encoding' }
38 verbose request invalidating /Users/barreiros/.npm/registry.npmjs.org/gorillajs on PUT
39 error publish Failed PUT 403
40 verbose stack Error: "You cannot publish over the previously published version 0.0.27." : gorillajs
40 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
40 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
40 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:200:22)
40 verbose stack     at emitTwo (events.js:106:13)
40 verbose stack     at Request.emit (events.js:191:7)
40 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1067:10)
40 verbose stack     at emitOne (events.js:101:20)
40 verbose stack     at Request.emit (events.js:188:7)
40 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:988:12)
41 verbose statusCode 403
42 verbose pkgid gorillajs
43 verbose cwd /Users/barreiros/Documents/workspace/Barreiros_GorillaJS
44 error Darwin 14.5.0
45 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
46 error node v6.2.1
47 error npm  v3.10.3
48 error code E403
49 error "You cannot publish over the previously published version 0.0.27." : gorillajs
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
