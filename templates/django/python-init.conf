#!/bin/bash

ENGINE="{{database.engine}}"
CACHE="{{cache.engine}}"
MESSAGES="{{messages.engine}}"

echo 'ServerName localhost' >> /etc/apache2/apache2.conf &&

cp -r /root/templates/waiting.html /var/www/html/index.html &&
mkdir -p ~/.ssh && touch ~/.ssh/authorized_keys && 
cat /root/templates/id_rsa-gorilla.pub >> ~/.ssh/authorized_keys &&

service apache2 restart &&

cp /root/templates/apache-vhost.conf /etc/apache2/sites-available/{{project.domain}}.conf && 
cd /var/www/{{project.domain}} &&

# Si no existe el archivo requirements.txt, añado uno por defecto.
if [ ! -e ./requirements.txt ]; then

    cp /root/templates/requirements.txt requirements.txt 

fi

echo 'Checking database' > /var/www/html/gorilla_status.txt &&

if [ "$ENGINE" == "PostgreSQL" ]; then

    # Si no está el módulo de postgresql, lo añado a la lista de requirements.
    if ! grep -q "psycopg2" requirements.txt; then

        echo "psycopg2" >> requirements.txt

    fi

elif [ "$ENGINE" == "MySQL" ]; then


    # Si no están lo módulos de mysql, los añado.
    if ! grep -q "MySQL-python" requirements.txt; then

        echo "MySQL-python" >> requirements.txt

    fi

    if ! grep -q "pymysql" requirements.txt; then

        echo "pymysql" >> requirements.txt

    fi

    if ! grep -q "mysqlclient" requirements.txt; then

        echo "mysqlclient" >> requirements.txt 

    fi

fi

if [ "$CACHE" == "Redis" ]; then

    # Si no existe el módulo de Redis, lo añado.
    if ! grep -q "django-redis" requirements.txt; then

        echo "django-redis" >> requirements.txt

    fi

elif [ "$CACHE" == "Memcached" ]; then

    # Si no existe el módulo de Memcached, lo añado.
    if ! grep -q "python-memcached" requirements.txt; then

        echo "python-memcached" >> requirements.txt

    fi

fi

if [ "$MESSAGES" == "yes" ]; then

    # Si no existe el módulo de Celery, lo añado.
    if ! grep -q "celery" requirements.txt; then

        echo "celery" >> requirements.txt

    fi

fi

echo 'Installing requirements' > /var/www/html/gorilla_status.txt &&

# Instalo las dependencias.
pip install -r requirements.txt &&


# Si no existe el archivo manage.py, creo un nuevo proyecto.
if [ ! -e ./manage.py ]; then

    django-admin.py startproject {{project.slug}} . &&
    sed -i '/ALLOWED_HOSTS/c\ALLOWED_HOSTS = ["{{project.domain}}"]' ./{{project.slug}}/settings.py

    # Si no está configurado, añado la ruta para los archivos estáticos.
    if ! grep -q "STATIC_ROOT" ./{{project.slug}}/settings.py; then

        echo 'STATIC_ROOT = os.path.join(BASE_DIR, "static/")' >> ./{{project.slug}}/settings.py

    fi

fi

# Elimino todas las configuraciones anteriores de GorillaJS.
if [ -e {{project.slug}}/settings.py ]; then

    sed -i '/# START GORILLAJS/,/# END GORILLAJS/ d' {{project.slug}}/settings.py 

fi

# Elimino la configuración por defecto de la base de datos.
if grep -q "sqlite3" {{project.slug}}/settings.py; then

    sed -i '/^DATABASES/,/^}$/ d' {{project.slug}}/settings.py 

fi

# Añado la configuración de la base de datos a django.
if [ "$ENGINE" == "PostgreSQL" ]; then

    # Elimino los módulos de mysql
    if [ -e {{project.slug}}/settings.py ]; then

        sed -i '/MySQL-python/d' {{project.slug}}/settings.py && 
        sed -i '/pymysql/d' {{project.slug}}/settings.py && 
        sed -i '/mysqlclient/d' {{project.slug}}/settings.py

    fi
    
    echo "$(cat /root/templates/settings-postgresql)" >> {{project.slug}}/settings.py

elif [ "$ENGINE" == "MySQL" ]; then

    # Elimino el módulo de PostgreSQL
    if [ -e {{project.slug}}/settings.py ]; then

        sed -i '/psycopg2/d' {{project.slug}}/settings.py

    fi

    echo "$(cat /root/templates/settings-mysql)" >> {{project.slug}}/settings.py

fi

# Añado la configuración de caché a django.
if [ "$CACHE" == "Redis" ]; then

    # Elimino el módulo de Memcached
    if [ -e {{project.slug}}/settings.py ]; then

        sed -i '/python-memcached/d' {{project.slug}}/settings.py

    fi

    echo "$(cat /root/templates/settings-redis)" >> {{project.slug}}/settings.py

elif [ "$CACHE" == "Memcached" ]; then

    # Elimino el módulo de Redis
    if [ -e {{project.slug}}/settings.py ]; then

        sed -i '/django-redis/d' {{project.slug}}/settings.py

    fi

    echo "$(cat /root/templates/settings-memcached)" >> {{project.slug}}/settings.py

fi

# Añado la configuración de RabbitMQ y Celery.
if [ "$MESSAGES" == "yes" ]; then

    echo "$(cat /root/templates/settings-rabbitmq)" >> {{project.slug}}/settings.py

    # Si no existe la app de Celery, la creo.
    if [ ! -e {{project.slug}}/celery.py ]; then

        cp /root/templates/celery.py {{project.slug}}/celery.py

    fi 

    # Si no está referenciada la app de Celery en el archivo, la importo.
    if ! grep -q "celery_app" {{project.slug}}/__init__.py; then

        echo "from .celery import app as celery_app" >> {{project.slug}}/__init__.py

    fi

else

    # Si existe la app de Celery, la elimino.
    if [ ! -e ./{{project.slug}}/celery.py ]; then

        rm ./{{project.slug}}/celery.py

    fi 

    # Si está referenciada la app de Celery en el archivo, la elimino.
    if ! grep -q "celery_app" {{project.slug}}/__init__.py; then

        sed -i '/celery_app/d' {{project.slug}}/__init__.py

    fi

fi

# Añado la configuración del logging si no existe.
if ! grep -q "LOGGING" ./{{project.slug}}/settings.py; then

    echo "$(cat /root/templates/settings-logging)" >> {{project.slug}}/settings.py

fi

# Vacío la carpeta de logs.
rm -rf /var/log/django/* &&

echo 'Django is ready!' > /var/www/html/gorilla_status.txt &&

sleep 3 &&

a2ensite {{project.domain}} && 
sudo a2dissite 000-default.conf && 
service apache2 restart &&

# Compilo una primera versión de los archivos estáticos
if [ ! -d "static" ]; then

    python manage.py collectstatic --noinput

fi

# Sincronizo la base de datos.
python manage.py migrate


