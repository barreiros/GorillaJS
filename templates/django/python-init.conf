#!/bin/bash -l

ENGINE={{django.database}}

mkdir -p ~/.ssh && touch ~/.ssh/authorized_keys && 
cat /root/templates/id_rsa-gorilla.pub >> ~/.ssh/authorized_keys &&

cp /root/templates/apache-vhost.conf /etc/apache2/sites-available/{{project.domain}}.conf && 
cd /var/www/{{project.domain}} &&

# Si no existe el archivo requirements.txt, añado uno por defecto.
if [ ! -e ./requirements.txt ]; then

    cp /root/templates/requirements.txt requirements.txt 

fi

sed -i '/# START GORILLAJS/,/# END GORILLAJS/ d' {{project.slug}}/settings.py && 

if [ "$ENGINE" = "PostgreSQL" ]; then

    # Si no está el módulo de postgresql, lo añado a la lista de requirements.
    if ! grep -q "psycopg2" requirements.txt; then

        echo "psycopg2" >> requirements.txt

    fi

    # Añado la configuración de la base de datos a django
    echo "$(cat /root/templates/settings-postgresql)" >> {{project.slug}}/settings.py

# elif [ "$ENGINE" = "MySQL" ]; then
#
#     # Si no está el módulo de mysql, lo añado a la lista de requirements.
#
#     # Añado la configuración de la base de datos a django

fi

# Instalo las dependencias.
pip install -r requirements.txt &&

# Sincronizo la base de datos.
# python manage.py syncdb

# Si no existe el archivo manage.py, creo un nuevo proyecto.
if [ ! -e ./manage.py ]; then

    django-admin.py startproject {{project.slug}} . &&
    sed -i '/ALLOWED_HOSTS/c\ALLOWED_HOSTS = ["{{project.domain}}"]' ./{{project.slug}}/settings.py

fi

# Si no está configurado, añado la ruta para los archivos estáticos.
if ! grep -q "STATIC_ROOT" ./{{project.slug}}/settings.py; then

    echo 'STATIC_ROOT = os.path.join(BASE_DIR, "static/")' >> ./{{project.slug}}/settings.py

fi

a2ensite {{project.domain}} && 
sudo a2dissite 000-default.conf && 
service apache2 start
