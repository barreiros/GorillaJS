#!/bin/bash

ENGINE="{{database.engine}}"

apt-get install -y libmysqlclient-dev python-dev &&
echo 'ServerName localhost' >> /etc/apache2/apache2.conf

mkdir -p ~/.ssh && touch ~/.ssh/authorized_keys && 
cat /root/templates/id_rsa-gorilla.pub >> ~/.ssh/authorized_keys &&

cp /root/templates/apache-vhost.conf /etc/apache2/sites-available/{{project.domain}}.conf && 
cd /var/www/{{project.domain}} &&

# Si no existe el archivo requirements.txt, añado uno por defecto.
if [ ! -e ./requirements.txt ]; then

    cp /root/templates/requirements.txt requirements.txt 

fi

if [ -e {{project.slug}}/settings.py ]; then

    sed -i '/# START GORILLAJS/,/# END GORILLAJS/ d' {{project.slug}}/settings.py 

fi

if [ "$ENGINE" == "PostgreSQL" ]; then

    # Elimino los módulos de mysql
    if [ -e {{project.slug}}/settings.py ]; then

        sed -i '/MySQL-python/d' {{project.slug}}/settings.py && 
        sed -i '/pymysql/d' {{project.slug}}/settings.py && 
        sed -i '/mysqlclient/d' {{project.slug}}/settings.py

    fi
    
    # Si no está el módulo de postgresql, lo añado a la lista de requirements.
    if ! grep -q "psycopg2" requirements.txt; then

        echo "psycopg2" >> requirements.txt

    fi

    # Añado la configuración de la base de datos a django
    echo "$(cat /root/templates/settings-postgresql)" >> {{project.slug}}/settings.py

elif [ "$ENGINE" == "MySQL" ]; then

    # Elimino el módulo de PostgreSQL
    if [ -e {{project.slug}}/settings.py ]; then

        sed -i '/psycopg2/d' {{project.slug}}/settings.py

    fi

    # Si no están lo módulos de mysql, los añado.
    if ! grep -q "MySQL-python" requirements.txt; then

        echo "MySQL-python" >> requirements.txt

    fi

    if ! grep -q "pymysql" requirements.txt; then

        echo "pymysql" >> requirements.txt

    fi

    if ! grep -q "mysqlclient" requirements.txt; then

        echo "mysqlclient" >> requirements.txt 

    fi


fi

# Instalo las dependencias.
pip install -r requirements.txt &&

# Si no existe el archivo manage.py, creo un nuevo proyecto.
if [ ! -e ./manage.py ]; then

    django-admin.py startproject {{project.slug}} . &&
    sed -i '/ALLOWED_HOSTS/c\ALLOWED_HOSTS = ["{{project.domain}}"]' ./{{project.slug}}/settings.py

fi

# Si no está configurado, añado la ruta para los archivos estáticos.
if ! grep -q "STATIC_ROOT" ./{{project.slug}}/settings.py; then

    echo 'STATIC_ROOT = os.path.join(BASE_DIR, "static/")' >> ./{{project.slug}}/settings.py

fi

# Añado la configuración de la base de datos a django
if [ "$ENGINE" == "PostgreSQL" ]; then

    echo "$(cat /root/templates/settings-postgresql)" >> {{project.slug}}/settings.py

elif [ "$ENGINE" == "MySQL" ]; then

    echo "$(cat /root/templates/settings-mysql)" >> {{project.slug}}/settings.py

fi

# Sincronizo la base de datos.
python manage.py migrate &&
python manage.py collectstatic &&

a2ensite {{project.domain}} && 
sudo a2dissite 000-default.conf && 
service apache2 start
