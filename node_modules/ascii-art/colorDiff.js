(function (root, factory) { // UMD - returnExports
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        
        module.exports = factory();
        
    } else {
        root.cdiff = factory();
    }
}(this, {compare:function(getImage, fs) {

    var HexRgb   = (function(){
        var _r = require('./rgb'); eval('var Rgb = _r');

        /**
         * Rgb color model, that created from HEX string and formatted as HEX
         * @extends Rgb
         * @param {String} hex
         */
        function HexRgb(hex) {
          if (undefined === hex) {
            return HexRgb.super_.apply(this, args);
          }
        
          var c  = '([a-f0-9]{1,2})',
              re = new RegExp('^#?' + c + c + c + '$', 'i'),
              m  = hex.match(re);
        
          if (null === m) {
            throw new Error('Value "' + hex + '" is unknown hex color');
          }
        
          var args = [
            this._parseIntFromHex(m[1]),
            this._parseIntFromHex(m[2]),
            this._parseIntFromHex(m[3])
          ];
          HexRgb.super_.apply(this, args);
        };
        
        HexRgb.prototype._parseIntFromHex = function(hex) {
          if (1 == hex.length) {
            hex = hex + hex;
          }
          return parseInt(hex, 16);
        };
        
        HexRgb.prototype.toString = function() {
          return '#' + this._formatIntAsHex(this.red()) + this._formatIntAsHex(this.green()) + this._formatIntAsHex(this.blue());
        };
        
        HexRgb.prototype._formatIntAsHex = function(intValue) {
          intValue = Math.round(intValue);
          strValue = '' + intValue;
          if (1 == strValue.length) {
            strValue = strValue + strValue;
          }
          return (intValue < 16 ? '0' : '') + intValue.toString(16);
        };
        
        HexRgb.prototype.toRgb = function () {
          return new HexRgb(this._red.get(), this._green.get(), this._blue.get());
        };
        
        HexRgb.prototype.red = function (value) {
          return this._component('red', arguments);
        };
        
        /**
         * @param {Number} value
         * @returns {Rgb}
         */
        HexRgb.prototype.green = function (value) {
          return this._component('green', arguments);
        };
        
        /**
         * @param {Number} value
         * @returns {Rgb}
         */
        HexRgb.prototype.blue = function (value) {
          return this._component('blue', arguments);
        };
        
        /**
         * @returns {HexRgb}
         */
        HexRgb.prototype.toHex = function () {
          var HexRgb = require('./hex-rgb');
          return new HexRgb()
            .red  (this._red  .get())
            .green(this._green.get())
            .blue (this._blue .get());
        };
        
        /**
         * @returns {String}
         */
        HexRgb.prototype.toHexString = function () {
          return this.toHex().toString();
        };
        
        /**
         * @param {Number} value
         * @returns {Number}
         */
        HexRgb.prototype._preparePreXyzValue = function(value) {
          value = value / 255;
          if (value > 0.04045) {
            value = (value + 0.055) / 1.055;
            value = Math.pow(value, 2.4);
          } else {
            value = value / 12.92;
          }
          return value * 100;
        };
        
        /**
         * @returns {Xyz}
         */
        HexRgb.prototype.toXyz = function () {
          var r = this._preparePreXyzValue(this._red  .get()),
              g = this._preparePreXyzValue(this._green.get()),
              b = this._preparePreXyzValue(this._blue .get());
        
          return new Xyz(
            this._finalizeXyzValue(r * 0.4124 + g * 0.3576 + b * 0.1805),
            this._finalizeXyzValue(r * 0.2126 + g * 0.7152 + b * 0.0722),
            this._finalizeXyzValue(r * 0.0193 + g * 0.1192 + b * 0.9505)
          );
        };
        
        /**
         * @param {Number} preXyzValue
         * @returns {Number}
         */
        HexRgb.prototype._finalizeXyzValue = function (preXyzValue) {
          return Math.round(preXyzValue * 10000) / 10000;
        };
        
        /**
         * @returns {Hsl}
         */
        HexRgb.prototype.toHsl = function () {
          var r = this._red  .get() / 255,
              g = this._green.get() / 255,
              b = this._blue .get() / 255,
              min   = Math.min(r, g, b),
              max   = Math.max(r, g, b),
              delta = max - min,
              lightness = (min + max) / 2;
        
          lightness = Math.round(lightness * 100) / 100;
        
          if (delta == 0) {
            return new Hsl(0, 0, lightness);
          }
        
          var saturation = 0;
          if (lightness < 0.5) {
            saturation = delta / (max + min);
          } else {
            saturation = delta / (2 - max - min);
          }
          saturation = Math.round(saturation * 100) / 100;
        
          var hue  = 0,
            deltaR = (((max - r) / 6 ) + (delta / 2)) / delta,
            deltaG = (((max - g) / 6 ) + (delta / 2)) / delta,
            deltaB = (((max - b) / 6 ) + (delta / 2)) / delta;
        
          if (r == max) {
            hue = deltaB - deltaG;
          } else if (g == max) {
            hue = ( 1 / 3 ) + deltaR - deltaB;
          } else {
            hue = ( 2 / 3 ) + deltaG - deltaR;
          }
        
          if (hue < 0) {
            ++hue;
          } else if (hue > 1) {
            --hue;
          }
          hue = (hue * 360.99999999999997) >> 0;
          if (360 == hue) {
            hue = 0;
          }
        
          return new Hsl(hue, saturation, lightness);
        };
        /**
         * @returns {String}
         */
        HexRgb.prototype.toString = function () {
          var v = [];
          for (var i = 0, iMax = this._components.length; i < iMax; i++) {
            v.push(this['_' + this._components[i]].get());
          }
          return this._name + '(' + v.join(', ') + ')';
        };
        
        /**
         * @param {AbstractModel} that
         * @returns {Boolean}
         */
        HexRgb.prototype.equals = function (that) {
          if (!(that instanceof AbstractModel) || this._name !== that._name) {
            return false;
          }
          for (var i = 0, cs = this._components, iMax = cs.length; i < iMax; i++) {
            var key = '_' + cs[i];
            if (!this[key].equals(that[key])) {
              return false;
            }
          }
          return true;
        };
        
        /**
         * @returns {Lab}
         */
        HexRgb.prototype.toLab = function () {
          return this.toXyz().toLab();
        };
        
        /**
         * Getter/chainable setter in one place
         *
         * @param {String} name
         * @param {Number} value
         * @returns {AbstractModel}
         */
        HexRgb.prototype.component = function (name, value) {
          var component = this['_' + name];
          if (undefined === component || !(component instanceof Component)) {
            throw new Error('Component "' + name + '" is not exists');
          }
        
          if (1 == arguments.length) {
            return component.get();
          }
        
          component.set(value);
          return this;
        };
        
        /**
         * @param {String} name
         * @param {Array} args
         * @returns {AbstractModel}
         */
        HexRgb.prototype._component = function (name, args) {
          /** @type Component */
          var component = this['_' + name];
        
          if (0 == args.length) {
            return component.get();
          }
        
          component.set(args[0]);
          return this;
        };

        return HexRgb;
    })().HexRgb;
    var methods = {
        'EuclideanDistance' : (function(){
          function EuclideanDistance() {};
            
            /**
             * @param {Rgb} color1
             * @param {Rgb} color2
             */
            EuclideanDistance.prototype.compare = function(color1, color2) {
              if (color1.equals(color2)) {
                return 0;
              }
            
              function squaredDelta(v1, v2) {
                return Math.pow(v1 - v2, 2);
              }
            
              var sum = 0;
              sum += squaredDelta(color1.red(),   color2.red());
              sum += squaredDelta(color1.green(), color2.green());
              sum += squaredDelta(color1.blue(),  color2.blue());
            
              var conversionIndex = 19.5075;
            
              return Math.sqrt(sum / conversionIndex);
            };
            return EuclideanDistance;
      })()
      , 'CIE76Difference'   : (function(){
          function CIE76Difference() {};
            
            /**
             * @param {Rgb} color1
             * @param {Rgb} color2
             */
            CIE76Difference.prototype.compare = function(color1, color2) {
              if (color1.equals(color2)) {
                return 0;
              }
            
              function squaredDelta(v1, v2) {
                return Math.pow(v1 - v2, 2);
              }
            
              var lab1 = color1.toLab(),
                  lab2 = color2.toLab(),
                  sum  = 0;
            
              sum += squaredDelta(lab1.lightness(), lab2.lightness());
              sum += squaredDelta(lab1.a(), lab2.a());
              sum += squaredDelta(lab1.b(), lab2.b());
            
              return Math.max(Math.min(Math.sqrt(sum), 100), 0)
            };
            return CIE76Difference;
      })()
    };
    function compare(color1, color2, method) {
      var methodName = method || 'CIE76Difference';
    
      if (undefined === methods[methodName]) {
        throw new Error('Method "' + methodName + '" is unknown. See implemented methods in ./lib/method directory.');
      }
    
      /** @type Abstract */
      var methodObj = new methods[methodName];
    
      return methodObj.compare(new HexRgb(color1), new HexRgb(color2));
    }
    return compare;
}}));